diff --git a/mathcomp/algebra/rat.v b/mathcomp/algebra/rat.v
index 228a824..da2ad40 100644
--- a/mathcomp/algebra/rat.v
+++ b/mathcomp/algebra/rat.v
@@ -799,6 +799,7 @@ Ltac ring_to_rat :=
           -?[(_ + _)%R]/(_ + _)%Q -?[(_ * _)%R]/(_ * _)%Q
           -?[(- _)%R]/(- _)%Q -?[(_ ^-1)%R]/(_ ^-1)%Q /=.
 
+(*
 Lemma rat_ring_theory : (ring_theory 0%Q 1%Q addq mulq subq oppq eq).
 Proof.
 split => * //; rat_to_ring;
@@ -815,3 +816,4 @@ by move=> p /eqP p_neq0; rat_to_ring; rewrite mulVf.
 Qed.
 
 Add Field rat_field : rat_field_theory.
+*)
diff --git a/mathcomp/solvable/all_solvable.v b/mathcomp/solvable/all_solvable.v
index b05a3c4..bc3d3a4 100644
--- a/mathcomp/solvable/all_solvable.v
+++ b/mathcomp/solvable/all_solvable.v
@@ -1,6 +1,6 @@
 Require Export abelian.
 Require Export alt.
-Require Export burnside_app.
+(* Require Export burnside_app. *)
 Require Export center.
 Require Export commutator.
 Require Export cyclic.
diff --git a/mathcomp/ssreflect/prime.v b/mathcomp/ssreflect/prime.v
index bcb163c..898d743 100644
--- a/mathcomp/ssreflect/prime.v
+++ b/mathcomp/ssreflect/prime.v
@@ -118,7 +118,7 @@ Notation "p ^? e :: pd" := (cons_pfactor p e pd)
 End PrimeDecompAux.
 
 (* For pretty-printing. *)
-Definition NumFactor (f : nat * nat) := ([Num of f.1], f.2).
+(* Definition NumFactor (f : nat * nat) := ([Num of f.1], f.2). *)
 
 Definition pfactor p e := p ^ e.
 
diff --git a/mathcomp/ssreflect/ssrnat.v b/mathcomp/ssreflect/ssrnat.v
index 86f8fb2..0235c53 100644
--- a/mathcomp/ssreflect/ssrnat.v
+++ b/mathcomp/ssreflect/ssrnat.v
@@ -1,9 +1,12 @@
 (* (c) Copyright 2006-2016 Microsoft Corporation and Inria.                  *)
 (* Distributed under the terms of CeCILL-B.                                  *)
 From mathcomp Require Import ssreflect ssrfun ssrbool eqtype.
+
+(*
 Require Import BinNat.
 Require BinPos Ndec.
 Require Export Ring.
+*)
 
 (******************************************************************************)
 (* A version of arithmetic on nat (natural numbers) that is better suited to  *)
@@ -1581,6 +1584,7 @@ End NatTrec.
 
 Notation natTrecE := NatTrec.trecE.
 
+(*
 Lemma eq_binP : Equality.axiom N.eqb.
 Proof.
 move=> p q; apply: (iffP idP) => [|<-]; last by case: p => //; elim.
@@ -1662,6 +1666,7 @@ by case: b; last (elim=> //= p <-; rewrite natTrecE mulnn -expnM muln2 ?expnS).
 Qed.
 
 End NumberInterpretation.
+*)
 
 (* Big(ger) nat IO; usage:                              *)
 (*     Num 1 072 399                                    *)
@@ -1670,6 +1675,7 @@ End NumberInterpretation.
 (*        to display the resut of an expression that    *)
 (*        returns a larger integer.                     *)
 
+(*
 Record number : Type := Num {bin_of_number :> N}.
 
 Definition extend_number (nn : number) m := Num (nn * 1000 + bin_of_nat m).
@@ -1682,9 +1688,11 @@ Canonical number_eqType := Eval hnf in EqType number number_eqMixin.
 
 Notation "[ 'Num' 'of' e ]" := (Num (bin_of_nat e))
   (at level 0, format "[ 'Num'  'of'  e ]") : nat_scope.
+*)
 
 (* Interface to ring/ring_simplify tactics *)
 
+(*
 Lemma nat_semi_ring : semi_ring_theory 0 1 addn muln (@eq _).
 Proof. exact: mk_srt add0n addnC addnA mul1n mul0n mulnC mulnA mulnDl. Qed.
 
@@ -1696,6 +1704,7 @@ Qed.
 
 Lemma nat_power_theory : power_theory 1 muln (@eq _) nat_of_bin expn.
 Proof. by split; apply: nat_of_exp_bin. Qed.
+*)
 
 (* Interface to the ring tactic machinery. *)
 
@@ -1703,11 +1712,13 @@ Fixpoint pop_succn e := if e is e'.+1 then fun n => pop_succn e' n.+1 else id.
 
 Ltac pop_succn e := eval lazy beta iota delta [pop_succn] in (pop_succn e 1).
 
+(*
 Ltac nat_litteral e :=
   match pop_succn e with
   | ?n.+1 => constr: (bin_of_nat n)
   |     _ => NotConstant
   end.
+*)
 
 Ltac succn_to_add :=
   match goal with
@@ -1720,9 +1731,11 @@ Ltac succn_to_add :=
   | _ => idtac
   end.
 
+(*
 Add Ring nat_ring_ssr : nat_semi_ring (morphism nat_semi_morph,
    constants [nat_litteral], preprocess [succn_to_add],
    power_tac nat_power_theory [nat_litteral]).
+*)
 
 (* A congruence tactic, similar to the boolean one, along with an .+1/+  *)
 (* normalization tactic.                                                 *)
